import {Select, Modify, Draw} from "ol/interaction.js";
import VectorLayer from "ol/layer/Vector.js";
import {Style, Icon} from "ol/style.js";
import VectorSource from "ol/source/Vector.js";
import Tool from "../../core/modelList/tool/model";
import GeoJSON from "ol/format/GeoJSON.js";
import Feature from "ol/Feature";
import { Point } from "ol/geom";


const ElementTool = Tool.extend({
    defaults: _.extend({}, Tool.prototype.defautls, {
        // ol.interaction.Draw
        drawInteraction: undefined,
        // ol.interaction.Select for the deleted features
        selectInteraction: undefined,
        // ol.interaction.Modify
        modifyInteraction: undefined,
        // destination layer for the drawn features
        layer: undefined,
        color: [55, 126, 184, 1],
        width: 500,
        broad: 500,
        opacity: 1,
        radius: 6,
        rotation:2,
        scale: 0.15,
        button: "a",
        drawType: {
            geometry: "Point",
            text: "Element setzen",
        },

        renderToWindow: true, // Wenn man auf Element platzieren klickt, kommt links ein Menü
        deactivateGFI: true,
        glyphicon: "glyphicon-pencil"
    }),
    // Quasi Constructor von ElementTool
    initialize: function () {
        var channel = Radio.channel("Element");

        this.superInitialize();
        channel.reply({
            "getLayer": function () {
                return this.get("layer");
            }
        }, this);



        this.on("change:isActive", this.setStatus, this);

        
    },

    setStatus: function (model, value) {
        if (value) {
            if (this.get("layer") === undefined) {
                this.createLayer();
            }
            this.createDrawInteraction(this.get("drawType"), this.get("layer"));
        }
        else {
            Radio.trigger("Map", "removeInteraction", this.get("drawInteraction"));
            Radio.trigger("Map", "removeInteraction", this.get("selectInteraction"));
            Radio.trigger("Map", "removeInteraction", this.get("modifyInteraction"));
        }
    },

    /**
     * creates a vector layer for drawn features and removes this callback from the change:isCurrentWin event
     * because only one layer to be needed
     * @param {boolean} value - is tool active
     * @returns {void}
     */
    createLayer: function () {
       var geoJsonObject = {
            'type': 'FeatureCollection',
            'features': [{
                'type': 'Feature',
                'geometry': {
                  'type': 'Polygon',
                  'coordinates': [[[561742,5933480], [561687,5933471], [561690,5933451], [561746,5933455]]]
                }
              }]
       }

       
      var iconStyle = this.getDrawStyle(this.get("drawType").text, this.get("button"));

      var source = new VectorSource({
          features: (new GeoJSON()).readFeatures(geoJsonObject)
          //features:[iconFeature],
      });
      var layer = new VectorLayer({
          name: "import_element_layer",
          source: source,
          alwaysOnTop: true,
          updateWhileAnimating: true,
          updateWhileInteracting: true,
          style: this.createLayerStyle.bind(this),
      });

    
      var layers = Radio.request("Map", "getLayers");
      Radio.trigger("Map", "addLayerToIndex", [layer, layers.getArray().length]);
      this.setLayer(layer);
    
    },

    createLayerStyle: function () {
        var resolution = Radio.request("MapView", "getResolution");
        var iconStyle = this.getStyle();
        var zoom = Radio.request("MapView", "getZoomLevel");
        console.log("hallo");
        console.log("0.6614579761460262 "+"/"+String(Radio.request("MapView", "getResolution")));
       iconStyle.getImage().setScale(/*0.6614579761460262*/10  / Radio.request("MapView", "getResolution"));
        return iconStyle;
    },

    /**
     * creates and sets a interaction for selecting vector features
     * @param {ol.layer.Vector} layer - for the selected(deleted) features
     * @returns {void}
     */
    createSelectInteraction: function (layer) {
        var selectInteraction = new Select({
            layers: [layer]
        });

        selectInteraction.on("select", function (evt) {
            // remove feature from source
            layer.getSource().removeFeature(evt.selected[0]);
            // remove feature from interaction
            this.getFeatures().clear();
        });
        this.setSelectInteraction(selectInteraction);
    },

    /**
     * creates and sets a interaction for modify vector features
     * @param {ol.layer.Vector} layer - for the selected(deleted) features
     * @returns {void}
     */
    createModifyInteraction: function (layer) {
        this.set("modifyInteraction", new Modify({
            source: layer.getSource(),

        }));
    },

    /*
    ++
    */
    createModificationStyle: function()
    {
        return Style({
            fill: new Fill({
                color: this.get("color"),
            }),
            stroke: new Stroke({
                color: this.get("color"),
                width: 5
            }),
            image: new Circle({
                radius: 5,
                fill: new Fill({
                    color: this.get("color"),
                })
            })
        });;
    },

    createDrawInteraction: function (drawType, layer) {
        var that = this;

        Radio.trigger("Map", "removeInteraction", this.get("drawInteraction"));
        this.set("drawInteraction", new Draw({
            source: layer.getSource(),
            type: drawType.geometry,
            style: this.getStyle(),
            
        }));
        // feature
        this.get("drawInteraction").on("drawend", function (evt) {
            evt.feature.set("styleId", _.uniqueId());
            evt.feature.setStyle(that.getStyle());
          // evt.feature.setRotation(evt.);
        }, this);
        Radio.trigger("Map", "addInteraction", this.get("drawInteraction"));
    },

    getStyle: function () {
        return this.getDrawStyle(this.get("drawType").text, this.get("button"));
    },

    /**
     * Erstellt ein Feature Style für Punkte, Linien oder Flächen und gibt ihn zurück.
     * @param {string} text -
     * @param {string} source
     * @return {ol.style.Style} style
     */
    getDrawStyle: function (text, button) {
        if(text==="Element setzen")
        {
        return new Style({
            image: new Icon({
                anchor: [0.5, 0.5],
                size: [this.get("width"), this.get("broad")],
                offset: [52, 0],
                opacity: this.get("opacity"),
                scale: this.get("scale"),
                //scale:this.calculateSetScaleOnLevel(Radio.request("MapView","getZoomLevel")),
                rotation:this.get("rotation")*Math.PI,
                src: this.determineIconImage(text, button)
            })
        });
    }
    },

    calculateSetScaleOnLevel: function(value)
    {
        var scale=value;

        if(scale===0)
        {
            return 0;
        }
        else if(scale===1)
        {
            return 0;
        }
        else if(scale===2)
        {
            return 0;
        }
        else if(scale===3)
        {
            return 0;
        }
        else if(scale===4)
        {
            return 0;
        }
        else if(scale===5)
        {
            return 0;
        }
        else if(scale===6)
        {
            return 0.05;
        }
        else if(scale===7)
        {
            return 0.1;
        }
        else if(scale===8)
        {
            return 0.15;
        }
        else if(scale===9)
        {
            return 0.2;
        }

    },

    // Löscht alle Geometrien
    deleteFeatures: function () {
        this.get("layer").getSource().clear();
    },
    //
    determineIconImage: function (text, button) {
        var s;
        // if (type === "Point") {
        if (text === "Element setzen") {
            switch (button) {
                case "a":
                    s = "https://i.imgur.com/HcP8opq.png";
                    break;
                case "b":
                    s = "https://i.imgur.com/E5E56YY.png";
                    break;
                case "c":
                    s = "https://i.imgur.com/4cpXAjc.png";
                    break;
                case "d":
                    s = "https://i.imgur.com/iExBu85.png";
                    break;
                case "e":
                    s = "https://i.imgur.com/68FaLNo.png";
                    break;
                case "f":
                    s = "https://i.imgur.com/h3DXn1M.png";
                    break;
                // usw
            }
        }
        //}
        return s;
    },

    toggleInteraction: function (value) {
        if (value.hasClass("modify")) {
            this.toggleModifyInteraction(this.get("drawInteraction").getActive());
        }
        else {
            this.toggleSelectInteraction(this.get("drawInteraction").getActive());
        }
    },
    // Aktiviert/Deaktiviert das Modifizieren von Features
    toggleModifyInteraction: function (value) {
        if (value) {
            Radio.trigger("Map", "addInteraction", this.get("modifyInteraction"));
            this.get("drawInteraction").setActive(false);
            this.setGlyphToCursor("glyphicon glyphicon-wrench");
        }
        else {
            Radio.trigger("Map", "removeInteraction", this.get("modifyInteraction"));
            this.get("drawInteraction").setActive(true);
            this.setGlyphToCursor("glyphicon glyphicon-pencil");
        }
    },

    // Aktiviert/Deaktiviert ol.interaction.select. Auf Click wird das Feature gelöscht.
    toggleSelectInteraction: function (value) {
        if (value) {
            Radio.trigger("Map", "addInteraction", this.get("selectInteraction"));
            this.get("drawInteraction").setActive(false);
            this.setGlyphToCursor("glyphicon glyphicon-trash");
        }
        else {
            Radio.trigger("Map", "removeInteraction", this.get("selectInteraction"));
            this.get("drawInteraction").setActive(true);
            this.setGlyphToCursor("glyphicon glyphicon-pencil");
        }
    },
    // Erstellt ein HTML-Element, legt dort das Glyphicon rein und klebt es an den Cursor
    setGlyphToCursor: function (glyphicon) {
        if (glyphicon.indexOf("trash") !== -1) {
            $("#map").removeClass("no-cursor");
            $("#map").addClass("cursor-crosshair");
        }
        else {
            $("#map").removeClass("cursor-crosshair");
            $("#map").addClass("no-cursor");
        }
        $("#cursorGlyph").removeClass();
        $("#cursorGlyph").addClass(glyphicon);
    },

    /**
     * Startet das Downloadmodul
     * @returns {void}
     */
    downloadFeatures: function () {
        var features = this.get("layer").getSource().getFeatures();

        Radio.trigger("download", "start", {
            data: features,
            formats: ["kml"],
            caller: {
                name: "draw",
                glyph: "glyphicon-pencil"
            }
        });
    },

    setDrawType: function (value1, value2, value3) {
        this.set("drawType", {geometry: value1, text: value2,freehand: value3});
    },

    setFont: function (value) {
        this.set("font", value);
    },


    setFontSize: function (value) {
        this.set("fontSize", value);
    },

    setColor: function (value) {
        this.set("color", value);
    },

    setOpacity: function (value) {
        this.set("opacity", value);
    },

    setBroadSize: function (value) {
        this.set("broad", value);
    },

    setWidthSize: function (value) {
        this.set("width", value);
    },

    setText: function (value) {
        this.set("text", value);
    },

    setRadius: function (value) {
        this.set("radius", parseInt(value, 10));
    },

    setStrokeWidth: function (value) {
        this.set("strokeWidth", parseInt(value, 10));
    },

    setSelectInteraction: function (value) {
        this.set("selectInteraction", value);
    },

    setLayer: function (value) {
        this.set("layer", value);
    },

    setButtonClicked: function (value) {
        this.set("button", value);
    },

   
    setScale: function (value)
    {
        this.set("scale",value);
    },
    

    setRotation: function(value)
    {
        this.set("rotation",value);
    },

    /**
      * halllllo scale
      */
    updateElementFeatures: function(value)
    {
       //var list = this.get("layer").getSource().getFeatures();
       var list = this.get("layer").getSource().getFeatures();

        _.each(list,function(l)
        {
            if(l.text==="Element setzen")
            {
                l.setScale(0.6614579761460262 / value);

            }
        }
        );
    },
});


export default ElementTool;
